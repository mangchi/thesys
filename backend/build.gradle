plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.thesys'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	jackson_version = '2.18.3'
	jwt_version = '0.12.3'
	aws_sdk_version = '2.30.21'

}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	
	// implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
	// implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	//HIKARICP
	// implementation("com.zaxxer:HikariCP:6.2.0")

	//Jackson
	implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"

	//jasypt
	// implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

	//JDBC
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

	//JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//JSOUP
	// implementation("org.jsoup:jsoup:1.18.3")

	//JWT
	implementation "io.jsonwebtoken:jjwt-api:${jwt_version}"
	implementation "io.jsonwebtoken:jjwt-impl:${jwt_version}"
	implementation "io.jsonwebtoken:jjwt-jackson:${jwt_version}"

	//LOG4J2
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.23.1'
    
	//Mybatis
	//implementation 'org.mybatis:mybatis:3.5.19'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

	//OAUTH
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//OKTA
	// implementation("com.okta.spring:okta-spring-boot-starter:3.0.7")
	// implementation("com.okta.spring:okta-spring-sdk:3.0.7")

	//Persistence
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	
	//Redis
	implementation("io.lettuce:lettuce-core:6.5.5.RELEASE")
	implementation 'org.springframework.data:spring-data-redis:3.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	
	//S3 BUCKET
	implementation("org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE")
	runtimeOnly "software.amazon.awssdk:bom:${aws_sdk_version}"
	implementation "software.amazon.awssdk:s3:${aws_sdk_version}"
	implementation "software.amazon.awssdk:sso:${aws_sdk_version}"
	implementation "software.amazon.awssdk:sts:${aws_sdk_version}"

	//SWAGGER
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	//validation
	// implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	//Vault
	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config:4.2.1'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.thesys.titan.TitanApplication' // Replace with your main class
        )
    }
}

bootJar {
    archiveFileName = 'app.jar'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

def generated = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

sourceSets {
    main.java.srcDirs += generated
}

compileJava {
    options.encoding = 'UTF-8'
}
